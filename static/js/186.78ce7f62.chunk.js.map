{"version":3,"file":"static/js/186.78ce7f62.chunk.js","mappings":"uQAAA,IAAMA,EAAM,mCAECC,EAAsB,WACjC,OAAOC,MAAM,4DAAD,OACkDF,IAE3DG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,OAAT,GACb,EAEYC,EAAiB,SAAAC,GAC5B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,oBAC0CT,EAD1C,oBAEVG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,GACX,EAEYK,EAAiB,SAAAD,GAC5B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,4BACkDT,EADlD,oBAGTG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAG,GAAI,OAAIA,EAAKK,IAAT,GACb,EAEYC,EAAoB,SAAAC,GAC/B,OAAOX,MAAM,qDAAD,OAC2CF,EAD3C,iCACuEa,EADvE,gCAGTV,MAAK,SAAAW,GAAQ,OAAIA,EAAST,MAAb,IACbF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,OAAT,GACb,EAEYQ,EAAoB,SAAAN,GAC/B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,4BACkDT,EADlD,oBAGTG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,OAAT,GACb,C,kHCGD,UArCgB,WACd,IAAQS,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA4BZ,GAA5B,iGAE6BM,EAAAA,EAAAA,IAAkBN,GAF/C,OAEUa,EAFV,OAIIF,GAAW,OAAIE,IAJnB,gDAMIC,QAAQC,IAAR,MANJ,0DADc,uBAAC,SAAD,2BAWdC,CAAaT,EACd,GAAE,CAACA,KAGF,8BACGG,EAAQO,OAAS,GAChB,wBACGP,EAAQQ,KAAI,SAAAC,GACX,OACE,4BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFHF,EAAOnB,GAKpB,OAGH,uFAIP,C,sBCxCD,SAASsB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CACIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOrC,KAAKgC,EAAOC,EAEvC,CACe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GACzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CACAhB,OAAMiB,EACR,GACF,CACF,C","sources":["components/Api/Api.jsx","components/Reviews/Reviews.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["const KEY = '5838ed03aade1a1b5b4b58af51fb1765';\n\nexport const fetchTrendingMovies = () => {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/movie/week?api_key=${KEY}`\n  )\n    .then(res => res.json())\n    .then(data => data.results);\n};\n\nexport const fetchMovieById = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}&language=en-US`\n  ).then(res => res.json());\n};\n\nexport const fetchMovieCast = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  )\n    .then(res => res.json())\n    .then(data => data.cast);\n};\n\nexport const fetchMovieByQuery = queryValue => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&language=en-US&query=${queryValue}&page=1&include_adult=false`\n  )\n    .then(response => response.json())\n    .then(data => data.results);\n};\n\nexport const fetchMovieReviews = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${KEY}&language=en-US`\n  )\n    .then(res => res.json())\n    .then(data => data.results);\n};\n","import { fetchMovieReviews } from 'components/Api/Api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    async function fetchReviews(id) {\n      try {\n        const reviewsArr = await fetchMovieReviews(id);\n\n        setReviews([...reviewsArr]);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => {\n            return (\n              <div key={review.id}>\n                <h3>{review.author}</h3>\n                <p>{review.content}</p>\n              </div>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie. You can be first</p>\n      )}\n    </>\n  );\n};\nexport default Reviews;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["KEY","fetchTrendingMovies","fetch","then","res","json","data","results","fetchMovieById","id","fetchMovieCast","cast","fetchMovieByQuery","queryValue","response","fetchMovieReviews","movieId","useParams","useState","reviews","setReviews","useEffect","reviewsArr","console","log","fetchReviews","length","map","review","author","content","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}